# Continuous‑integration pipeline for thesis_fuzzy
# ------------------------------------------------
# • Lints with ruff
# • Runs pytest + coverage on 4 Python versions
# • Builds a wheel artefact after tests pass
# • Publishes to *Test* PyPI automatically on version tags `vX.Y.Z`

name: CI

on:
  push:
    branches: ["main"]
    tags:   ["v*"]
  pull_request:
    branches: ["main"]

jobs:
  test:
    name: Test on ${{ matrix.python-version }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.13"]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: "pip"

      - name: Install project & dev deps
        run: |
          python -m pip install --upgrade pip
          pip install .[dev] 

      - name: Lint with ruff
        run: ruff check

      - name: Run tests with coverage
        run: |
          pytest -q --cov=thesis --cov-report=xml

      - name: Upload coverage artefact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.python-version }}
          path: coverage.xml

  build-wheel:
    name: Build wheel (Py 3.13)
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"
          cache: "pip"

      - name: Install build backend
        run: |
          python -m pip install --upgrade pip
          pip install build

      - name: Build wheel
        run: python -m build --wheel

      - name: Upload wheel artefact
        uses: actions/upload-artifact@v4
        with:
          name: wheel
          path: dist/*.whl

  publish-testpypi:
    name: Publish to TestPyPI on tag
    if: startsWith(github.ref, 'refs/tags/v')
    needs: build-wheel
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.13"

      - name: Install build & twine
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build sdist & wheel
        run: python -m build

    #   - name: Upload to TestPyPI
    #     env:
    #       TWINE_USERNAME: __token__
    #       TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
    #     run: twine upload --repository testpypi dist/*
